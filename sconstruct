# -*- python -*-

import os
import sys
import platform
import string
sys.path.append('SconsTests')
import utils

EnsureSConsVersion(1, 2)

# TODO: how do we use it in help?
name="PCSP"
version="SVN"
description="PSP emulator"
license="unknown"  # "GPL v2"


warnings = [
          "all",
          "address",
          "array-bounds",
          "c++0x-compat",  
          "char-subscripts",
          "enum-compare",
          "comment",  
          "format",   
          "main",
          "missing-braces",  
          "no-conversion",
          "packed",
          "parentheses",  
          "pointer-arith",
          "reorder",   
          "return-type",  
          "sequence-point",  
          "sign-compare",
#          "-Wstrict-aliasing",  
          "strict-overflow=1",
#          "-Wswitch",  
          "trigraphs",  
          "uninitialized",  
          "unknown-pragmas",  
          "unused-function", 
          "unused-label",     
          "unused-value",     
#          "-Wunused-variable",  
          "volatile-register-var", 
]

compileFlags = [
    '-fno-exceptions',
    '-fno-strict-aliasing',
    '-msse2',
#    '-fomit-frame-pointer',
#    '-flto',
    ]


cppDefines = [
    ( '_FILE_OFFSET_BITS', 64),
      '_LARGEFILE_SOURCE',
      'GCC_HASCLASSVISIBILITY',
      'HAVE_SETJMP_H',
      'HAVE_SIGALTSTACK',
      ( 'HLEDECL', '' ),
    ]

basedir = os.getcwd() + '/'

include_paths = [
    basedir + 'pcsp/src/',
    basedir + 'pcsp/src/qt4/',
    basedir + '3rdparty/glee',
    "/usr/include/qt4/",
    "/usr/include/qt4/QtCore/",
    "/usr/include/qt4/QtGui/",
    "/usr/include/qt4/QtXml/",
]


dirs = ["pcsp/src",
        "3rdparty/glee"]


builders = {}
if sys.platform == 'darwin':
    from plistlib import writePlist
    def createPlist(target, source, env):
        properties = {}
        for srcNode in source:
            properties.update(srcNode.value)
            for dstNode in target:
                writePlist(properties, str(dstNode))
    builders['Plist'] = Builder(action = createPlist)


# handle command line options
vars = Variables('args.cache')

vars.AddVariables(
    BoolVariable('verbose', 'Set for compilation line', False),
    BoolVariable('bundle', 'Set to create bundle', False),
    BoolVariable('lint', 'Set for lint build (extra warnings)', False),
    PathVariable('userdir', 'Set the name of the user data directory in home', '.dolphin-emu', PathVariable.PathAccept),
    EnumVariable('install', 'Choose a local or global installation', 'local',
                 allowed_values = ('local', 'global'),
                 ignorecase = 2
                 ),
    PathVariable('prefix', 'Installation prefix (only used for a global build)', '/usr', PathVariable.PathAccept),
    PathVariable('destdir', 'Temporary install location (for package building)', None, PathVariable.PathAccept),
    EnumVariable('flavor', 'Choose a build flavor', 'release',
                 allowed_values = ('release', 'devel', 'debug', 'fastlog', 'prof'),
                 ignorecase = 2
                 ),
    EnumVariable('osx', 'Choose a backend (WIP)', '32cocoa',
                 allowed_values = ('32x11', '32cocoa', '64cocoa'),
                 ignorecase = 2
                 ),
    EnumVariable('pgo', 'Profile-Guided Optimization (generate or use)', 'none',
                allowed_values = ('none', 'generate', 'use'),
                ignorecase = 2
                ),
    ('CC', 'The c compiler', 'gcc'),
    ('CXX', 'The c++ compiler', 'g++'),
    )

if sys.platform == 'win32':
    env = Environment(
        CPPPATH = include_paths,
        RPATH = [],
        LIBS = [],
        LIBPATH = [],
        tools = [ 'mingw' ],
        variables = vars,
        ENV = os.environ,
        BUILDERS = builders,
        DESCRIPTION = description,
        SUMMARY = description,
        LICENSE = license,
        NAME = name,
        VERSION = version,
        )
else:
    env = Environment(
        CPPPATH = include_paths,
        RPATH = [],
        LIBS = [],
        LIBPATH = [],
        variables = vars,
        ENV = {
            'PATH' : os.environ['PATH'],
            'HOME' : os.environ['HOME']
        },
        BUILDERS = builders,
        DESCRIPTION = description,
        SUMMARY = description,
        LICENSE = license,
        NAME = name,
        VERSION = version,
        )

# save the given command line options
vars.Save('args.cache', env)

# verbose compile
if not env['verbose']:
    env['CCCOMSTR'] = "Compiling $TARGET"
    env['CXXCOMSTR'] = "Compiling $TARGET"
    env['ARCOMSTR'] = "Archiving $TARGET"
    env['LINKCOMSTR'] = "Linking $TARGET"
    env['ASCOMSTR'] = "Assembling $TARGET"
    env['ASPPCOMSTR'] = "Assembling $TARGET"
    env['SHCCCOMSTR'] = "Compiling shared $TARGET"
    env['SHCXXCOMSTR'] = "Compiling shared $TARGET"
    env['SHLINKCOMSTR'] = "Linking shared $TARGET"
    env['RANLIBCOMSTR'] = "Indexing $TARGET"

# build flavor
flavour = ARGUMENTS.get('flavor')
if (flavour == 'debug'):
    compileFlags.append('-ggdb')
    cppDefines.append('_DEBUG') #enables LOGGING
elif (flavour == 'devel'):
    compileFlags.append('-ggdb')
elif (flavour == 'fastlog'):
    compileFlags.append('-O3')
    cppDefines.append('DEBUGFAST')
elif (flavour == 'prof'):
    compileFlags.append('-O3')
    compileFlags.append('-ggdb')
elif (flavour == 'release'):
    compileFlags.append('-O3')
    compileFlags.append('-fomit-frame-pointer');

# more warnings
if env['lint']:
    warnings.append('error')
    warnings.append('unreachable-code')
    warnings.append('float-equal')

# add the warnings to the compile flags
compileFlags += [ ('-W' + warning) for warning in warnings ]

env['CCFLAGS'] = compileFlags
if sys.platform == 'win32':
    env['CXXFLAGS'] = compileFlags
else:
    env['CXXFLAGS'] = compileFlags + [ '-fvisibility-inlines-hidden' ]
env['CPPDEFINES'] = cppDefines

# pgo - Profile Guided Optimization
if env['pgo']=='generate':
    compileFlags.append('-fprofile-generate')
    env['LINKFLAGS']='-fprofile-generate'
if env['pgo']=='use':
    compileFlags.append('-fprofile-use')
    env['LINKFLAGS']='-fprofile-use'

# Configuration tests section
tests = {'CheckPKGConfig' : utils.CheckPKGConfig,
         'CheckPKG' : utils.CheckPKG,
         'CheckSDL' : utils.CheckSDL,
         'CheckFink' : utils.CheckFink,
         'CheckMacports' : utils.CheckMacports,
         'CheckPortaudio' : utils.CheckPortaudio,
         }
#object files
env['build_dir'] = os.path.join(basedir, 'Build', platform.system() + '-' + platform.machine() + '-' + env['flavor'] + os.sep)


VariantDir(env['build_dir'], '.', duplicate=0)

# Where do we run from
env['base_dir'] = os.getcwd()+ '/'

# install paths
extra=''
if flavour == 'debug':
    extra = '-debug'
elif flavour == 'prof':
    extra = '-prof'

# Set up the install locations
if (ARGUMENTS.get('install') == 'global'):
    env['prefix'] = os.path.join(env['prefix'] + os.sep)
    env['binary_dir'] = env['prefix'] + 'bin/'
    env['libs_dir'] = env['prefix'] + 'lib/'
    env['plugin_dir'] = env['prefix'] + 'lib/dolphin-emu/' 
    env['data_dir'] = env['prefix'] + "share/dolphin-emu/"
else:
    env['prefix'] = os.path.join(env['base_dir'] + 'bin', platform.system() + '-' + platform.machine() + extra + os.sep)
    env['binary_dir'] = env['prefix']
    if sys.platform == 'darwin':
        env['plugin_dir'] = env['prefix'] + 'Dolphin.app/Contents/PlugIns/'
        env['data_dir'] = env['prefix'] + 'Dolphin.app/Contents/'
        env['libs_dir'] = env['prefix'] + 'Libs/'
    else:
        env['plugin_dir'] = env['prefix'] + 'plugins/' 
        env['data_dir'] = env['prefix']
        env['libs_dir'] = env['prefix'] + 'lib/'

env['RPATH'].append(env['libs_dir'])

# static libs goes here
env['local_libs'] =  env['build_dir'] + os.sep + 'libs' + os.sep

env['LIBPATH'].append(env['local_libs']) 
env['LIBPATH'].append(env['libs_dir']) 

conf = env.Configure(custom_tests = tests, 
                     config_h="pcsp/src/common/config.h")

if not conf.CheckPKGConfig('0.15.0'):
    print "Can't find pkg-config, some tests will fail"

# find ports/fink for library and include path
if sys.platform == 'darwin':
    #ports usually has newer versions
    conf.CheckMacports()
    conf.CheckFink()

env['HAVE_SDL'] = conf.CheckSDL('1.0.0')

# Bluetooth for wii support
env['HAVE_BLUEZ'] = conf.CheckPKG('bluez')

env['HAVE_ALSA'] = conf.CheckPKG('alsa')

#osx 64 specifics
if sys.platform == 'darwin':
    if env['osx'] == '64cocoa':
        compileFlags += ['-arch' , 'x86_64', '-m64' ]
        conf.Define('MAP_32BIT', 0)
    if env['osx'] == '32cocoa':
        compileFlags += ['-arch' , 'i386', '-m32' ]
    if not env['osx'] == '32x11':
        env['HAVE_X11'] = 0
        env['HAVE_COCOA'] = 1

else:
    env['HAVE_X11'] = conf.CheckPKG('x11')
    env['HAVE_COCOA'] = 0
   

# Creating config.h defines
conf.Define('HAVE_SDL', env['HAVE_SDL'])
conf.Define('HAVE_ALSA', env['HAVE_ALSA'])
conf.Define('HAVE_X11', env['HAVE_X11'])
conf.Define('HAVE_COCOA', env['HAVE_COCOA'])
conf.Define('USER_DIR', "\"" + env['userdir'] + "\"")
if (ARGUMENTS.get('install') == 'global'):
    conf.Define('DATA_DIR', "\"" + env['data_dir'] + "\"")
    conf.Define('LIBS_DIR', "\"" + env['libs_dir'] + "\"")

# profile
env['USE_OPROFILE'] = 0
if (flavour == 'prof'): 
    proflibs = [ '/usr/lib/oprofile', '/usr/local/lib/oprofile' ]
    env['LIBPATH'].append(proflibs)
    env['RPATH'].append(proflibs)
    if conf.CheckPKG('opagent'):
        env['USE_OPROFILE'] = 1
    else:
        print "Can't build prof without oprofile, disabling"

conf.Define('USE_OPROFILE', env['USE_OPROFILE'])
# After all configuration tests are done
conf.Finish()

# add methods from utils to env
env.AddMethod(utils.filterWarnings)

#rev = utils.GenerateRevFile(env['flavor'], 
#                            "src/common/svnrev_template.h",
#                            "src/common/svnrev.h")

# print a nice progress indication when not compiling
Progress(['-\r', '\\\r', '|\r', '/\r'], interval = 5)

# Setup destdir for package building
# Warning:  The program will not run from this location.  It is assumed the
# package will later install it to the prefix as it was defined before this.
if env.has_key('destdir'):
    env['prefix'] = env['destdir'] + env['prefix']
    env['plugin_dir'] = env['destdir'] + env['plugin_dir']
    env['binary_dir'] = env['destdir'] + env['binary_dir']
    env['libs_dir'] = env['destdir'] + env['libs_dir']
    env['data_dir'] = env['destdir'] + env['data_dir']

# die on unknown variables
unknown = vars.UnknownVariables()
if unknown:
    print "Unknown variables:", unknown.keys()
    Exit(1)

# generate help
Help(vars.GenerateHelpText(env))

Export('env')

for subdir in dirs:
    SConscript(
        subdir + os.sep + 'SConscript',
        variant_dir = env[ 'build_dir' ] + subdir + os.sep,
        duplicate=0
        )

# Data install
#if sys.platform == 'darwin':
#    env.Install(env['data_dir'], 'Data/Sys')
#    env.Install(env['data_dir'], 'Data/User')
#    env.Install(env['binary_dir'] + 'Dolphin.app/Contents/Resources/', 
#                'Source/Core/DolphinWX/resources/Dolphin.icns')
#else:
#    env.InstallAs(env['data_dir'] + 'sys', 'Data/Sys')
#    env.InstallAs(env['data_dir'] + 'user', 'Data/User')

#env.Alias('install', env['prefix'])

#if env['bundle']:
#    # Make tar ball (TODO put inside normal dir)
#    tar_env = env.Clone()
#    tarball = tar_env.Tar('dolphin-'+rev +'.tar.bz2', env['prefix'])
#    tar_env.Append(TARFLAGS='-j', 
#                   TARCOMSTR="Creating release tarball")

# === Libraries ===
libraries = [
"dinput8",
"dxguid",
"m",
"opengl32",
"glu32",
"libpthreadGC2",
"gdi32",
"user32",
"kernel32", 
"winspool", 
"comdlg32",
"advapi32", 
"shell32", 
"ole32", 
"oleaut32", 
"uuid",
"odbc32", 
"odbccp32",
"comctl32",
"winmm",
"rpcrt4",
"comdlg32",
"wsock32",
]
warningstring = string.join( warnings, ' ' )

